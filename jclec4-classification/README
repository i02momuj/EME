=====================================================================
                                                                     
                        JCLEC-classification
                            2 Jul 2014
                                                                       
 A Classification Module for Genetic Programming Algorithms in JCLEC  

           web: http://jclec.sourceforge.net/classification            
                                                                       
=====================================================================


Contents:
---------

1. Download and install

2. Compilation

3. JCLEC documentation

4. Data sets format

5. Creating the configuration file

6. Using JCLEC

   - Command line
   - Eclipse
   - NetBeans

7. Source code

8. Credits

9. Submission of code and bug reports

10. Copyright


-----------------------------------------------------------------------------

1. Download and install:
-----------------------------------------------------------------------------

JCLEC framework is open source software and it is distributed in many ways.
The user can download the current version of JCLEC from SourceForge at:

http://sourceforge.net/projects/jclec/files/

JCLEC can also be obtained using a CVS, SVN and GIT via SourceForge.
Further information is available in the following link:

http://jclec.sourceforge.net/download

Moreover, JCLEC can be imported as project in Eclipse or NetBeans.
Information about how to import JCLEC as an Eclipse project is available in 
the following link:

http://jclec.sourceforge.net/index.php?option=com_content&view=article&id=16

Information about how to import JCLEC as a NetBeans project is available in 
the following link:

http://jclec.sourceforge.net/index.php?option=com_content&view=article&id=17

----------------------------------------------------------------------------

2. Compilation:
----------------------------------------------------------------------------

The source code can be compiled in two ways:

1. Using the ant compiler and the build.xml file. 
   Open a terminal console located in the project path and type "ant".
   A jar file named "jclec4-classification.jar" will be created.
   For cleaning the project just type "ant clean".

2. Using the maven compiler and the pom.xml file.
   Open a terminal console located in the project path and type:
   1. "mvn initialize" to initialize the project setup and repositories.
   2. "mvn package" to build the jar file.
   A jar file named "jclec4-classification.jar" will be created.
   For cleaning the project just type "mvn clean".

----------------------------------------------------------------------------

3. JCLEC documentation:
----------------------------------------------------------------------------

Any information related to the JCLEC core package and the JCLEC classification 
module is available in a descriptive WIKI:

http://jclec.sourceforge.net/mediawiki/index.php/JCLEC_wiki

Additionally, there are available two documents for both JCLEC core and JCLEC 
classification module. The documentation includes a description for both the 
user and the developer point of view.

Both documents can be downloaded from:

http://jclec.sourceforge.net/data/JCLEC-tutorial.pdf

http://jclec.sourceforge.net/data/JCLEC-classification.pdf

----------------------------------------------------------------------------

4. Data sets format:
----------------------------------------------------------------------------

JCLEC requires a file for the specification of a dataset. An ARFF 
(Attribute-Relation File Format) file is an ASCII text file that describes a 
list of instances sharing a set of attributes. ARFF files were developed by 
the Machine Learning Project at the Department of Computer Science of The 
University of Waikato.

The following information was obtained from the WEKA webpage:

http://www.cs.waikato.ac.nz/~ml/weka/

A dataset has to start with a declaration of its name:

@relation name

followed by a list of all the attributes in the dataset (including 
the class attribute). These declarations have the form

@attribute attribute_name specification

If an attribute is nominal, specification contains a list of the 
possible attribute values in curly brackets:

@attribute nominal_attribute {first_value, second_value, third_value}

If an attribute is numeric, specification is replaced by the keyword 
numeric: (Integer values are treated as real numbers.)

@attribute numeric_attribute numeric

After the attribute declarations, the actual data is introduced by a 

@data

tag, which is followed by a list of all the instances. The instances 
are listed in comma-separated format, with a question mark 
representing a missing value. 

Comments are lines starting with % and are ignored.

----------------------------------------------------------------------------

5. Creating the configuration file:
----------------------------------------------------------------------------

To execute any algorithm in JCLEC, a configuration file is required.
The configuration file comprises a series of parameters 
required to run the algorithm.

The most important parameters are described as follows:

*The algorithm: this parameter establishes the algorithm used to solve the 
problem. A sample of the Tan et al. algorithm is shown:

<process algorithm-type="net.sf.jclec.problem.classification.algorithm.tan.
TanAlgorithm">

*Stopping criterion: this parameter determines the maximum number of 
generations. Once this number is reached, the algorithm finishes returning 
its results. A sample of 100 generations is shown:

<max-of-generations>100</max-of-generations>

*Number of individuals: number of individuals that form the population. A 
sample of 100 individuals is shown:

<population-size>100</population-size>

*Train and test files: this parameter allows of determining the train and 
test dataset files. Firstly, the type of dataset to be used is determined 
by using the package net.sf.jclec.problem.util.dataset. Secondly, the train 
ant test files are specified. Finally, the attribute that represents the 
class in the classification algorithm is established. Following, a sample 
ArffDataset is determined:

<dataset type="net.sf.jclec.problem.util.dataset.ArffDataSet">
     <train-data>data/iris/iris-10-1tra.dat</train-data>
     <test-data>data/iris/iris-10-1tst.dat</test-data>	
     <attribute-class-name>Class</attribute-class-name>
</dataset>

*Genetic operators: both the crossover probability and the mutation
probability are specified by using these parameters:

<recombination-prob>0.8</recombination-prob>
<mutation-prob>0.1</mutation-prob>

*Listener: a listener to display the results should be determined from the 
package net.sf.jclec.problem.classification.listener. In the following 
example, a report is made every 10 generations. Furthermore, the name of 
the folder that comprises the reports is reportTan. Finally, a global 
report named summaryTan is made once the algorithm finishes.

<listener type="net.sf.jclec.problem.classification.listener.RuleBaseReporter">
      <report-dir-name>reports/reportTan</report-dir-name>
      <global-report-name>summaryTan</global-report-name>
      <report-frequency>10</report-frequency>	
</listener>

----------------------------------------------------------------------------

6. Using JCLEC:
----------------------------------------------------------------------------

Once you have downloaded JCLEC, JCLEC classification module, and designed an
experiment in the configuration file, we can build and execute the experiment.

The jclec4-classification.jar file can be built using ANT (build.xml)
or MAVEN (pom.xml), using the "initialize" to setup the project and "package" goal to build the jar.

Using a command-line (assuming you are in the directory containing the 
jar file and your configuration file, for example examples/Falco.cfg), type:

java -jar jclec4-classification.jar examples/Falco.cfg

The user can also run the algorithms using Eclipse, please see:

http://jclec.sourceforge.net/mediawiki/index.php?title=Classification_
package_documentation#Running_a_classification_algorithm

Further information about how to run algorithms using command-line, Eclipse 
or even NetBeans is available in the following links:

http://jclec.sourceforge.net/data/JCLEC-tutorial.pdf

http://jclec.sourceforge.net/data/JCLEC-classification.pdf

----------------------------------------------------------------------------

7. Source code:
----------------------------------------------------------------------------

The source code of JCLEC is available for downloading at SourceForge via
direct download, CVS, SVN and GIT at the link:

http://jclec.sourceforge.net/download

The source code of JCLEC is free and available under the GNU General Public
License (GPL) v3. Thus, it can be distributed and modified without any fee.

----------------------------------------------------------------------------

8. Credits:
----------------------------------------------------------------------------

Refer to the web page for a list of contributors:

https://www.sourceforge.net/projects/jclec/

----------------------------------------------------------------------------

9. Submission of code and bug reports:
----------------------------------------------------------------------------

If you have implemented an algorithm, operator, filter or extension using 
the JCLEC classes, and you would like to make it available to the community, 
please submit your contribution to sventura@uco.es

If you find any bugs, send a bug report to sventura@uco.es

----------------------------------------------------------------------------

10. Copyright:
----------------------------------------------------------------------------

The JCLEC system is distributed under the GNU public license v3. Please read 
the file COPYING.

Packages may be distributed under various licenses - check the description 
of the package in question for license details.