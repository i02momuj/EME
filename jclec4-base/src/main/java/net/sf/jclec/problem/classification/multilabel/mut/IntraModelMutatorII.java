package net.sf.jclec.problem.classification.multilabel.mut;

import net.sf.jclec.binarray.BinArrayIndividual;
import net.sf.jclec.binarray.BinArrayMutator;

public class IntraModelMutatorII extends BinArrayMutator
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = 4051327838076744754L;
	
	/////////////////////////////////////////////////////////////////
	// --------------------------------------------------- Properties
	/////////////////////////////////////////////////////////////////

	protected int numberLabels;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	
	public IntraModelMutatorII() 
	{
		super();
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	public void setNumberLabels(int numberLabels) {
		this.numberLabels = numberLabels;
	}

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void mutateNext() 
	{
		// Individual to be mutated
		BinArrayIndividual mutant = (BinArrayIndividual) parentsBuffer.get(parentsCounter);
		// Genome length
		int gl = mutant.getGenotype().length;
		// Creates mutant genotype
		byte [] mgenome = new byte[gl];
		System.arraycopy(mutant.getGenotype(), 0, mgenome, 0, gl);
		
		int mp1, mp2;
		for (int i = 0; i < (gl/numberLabels); i++) 
		{
			mp1 = randgen.choose(i*numberLabels, (i+1)*numberLabels);
			do{
				mp2 = randgen.choose(i*numberLabels, (i+1)*numberLabels);
			}while(mp1==mp2);
			
			// Swap
			byte aux = mgenome[mp1];
			mgenome[mp1] = mgenome[mp2];
			mgenome[mp2] = aux;
		}
		
		if(randgen.coin())
		{
			byte [] mgenome2 = null;
			
			if(randgen.coin())
			{
				//Add base classifier
				
				byte [] newBC = new byte[numberLabels];
				for(int l=0; l<3; l++)
				{
					int r = -1;
					do{
						r = randgen.choose(0, numberLabels);
					}while(newBC[r] == 1);
					newBC[r] = 1;
				}
				
				mgenome2 = new byte[gl+numberLabels];
				for(int i=0; i<gl; i++)
					mgenome2[i] = mgenome[i];
				for(int i=gl, k=0; i<(gl+numberLabels); i++, k++)
					mgenome2[i] = newBC[k];			
				
			}
			else
			{
				//Remove base classifier
				int r = randgen.choose(0, gl/numberLabels);
				
				mgenome2 = new byte[gl-numberLabels];

				for(int i=0, k=0; i<gl; i++)
				{
					System.out.println("r: " + r + " i/numberLabels: " + i/numberLabels);
					if((i/numberLabels) != r)
					{
						mgenome2[k] = mgenome[i];
						k++;
					}
					else
						System.out.println("No");
				}
			}
			
			sonsBuffer.add(species.createIndividual(mgenome2));
		}
		else
		{
			sonsBuffer.add(species.createIndividual(mgenome));
		}
		
		
//		sonsBuffer.add(species.createIndividual(mgenome));
	}
	
	public boolean equals(Object other)
	{
		if (other instanceof IntraModelMutatorII) {
			return true;
		}
		else {
			return false;
		}
	}
}